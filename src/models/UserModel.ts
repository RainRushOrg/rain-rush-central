import { Model, DataTypes, Optional } from 'sequelize';
import sequelize from '../config/sequelize';
import RunModel from './RunModel';

// Define the attributes for UserModel
interface UserAttributes {
  id: number;
  username: string;
  email: string;
  password: string;
  createdAt: Date;  // Automatically generated by Sequelize
  updatedAt: Date;  // Automatically generated by Sequelize
}

// Define the optional fields for creation (excluding `id`, `createdAt`, and `updatedAt`)
interface UserCreationAttributes extends Optional<UserAttributes,'id' | 'createdAt' | 'updatedAt'> {}

class UserModel extends Model<UserAttributes, UserCreationAttributes>  {
  declare id: number;
  declare username: string;
  declare email: string;
  declare password: string;
  static associate() {
    // Define associations here

  }
}

UserModel.init(
  {
    id: {
      type: DataTypes.UUID,
      primaryKey: true,
      defaultValue: DataTypes.UUIDV4,
    },
    username: {
      type: new DataTypes.STRING(128),
      allowNull: false,
    },
    email: {
      type: new DataTypes.STRING(128),
      allowNull: false,
    },
    password: {
      type: new DataTypes.STRING(128),
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW
    },
    updatedAt: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW,
    }
  },
  {
    tableName: 'users',
    modelName: 'UserModel',
    sequelize,
    // Automatically manage timestamps
    timestamps: true,// This ensures that `createdAt` and `updatedAt` are managed by Sequelize
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
  }
);

export default UserModel;
